Script started on Tue 24 Apr 2018 12:03:06 PM EDT
[?1034hbash-4.1$ date
Tue Apr 24 12:03:16 EDT 2018
bash-4.1$ uname -a
Linux Zeus-2 2.6.32-696.18.7.el6.centos.plus.x86_64 #1 SMP Tue Jan 9 14:11:50 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
bash-4.1$ ls
itemList_qvo8_201.c  itemList_qvo8_201.h  Makefile  order_qvo8_201.c  order_qvo8_201.h	proj3_qvo8_201.c  proj3Typescript_qvo8_201
bash-4.1$ cat itemList_qvo8_201.c[Kh

#ifndef ITEMLIST_QVO8_201_H
#define ITEMLIST_QVO8_201_H

#include <stddef.h>

typedef struct _node
{
    char *data;  // Food Item Name
    struct _node *next;
} node;

typedef struct _itemList
{
    node *head;  // Pointer to first food item for the order (alphabetical)
    int count;   // Number of food items in the order
} itemList;

//prototypes
itemList *createItem();
int insert(char *data, itemList **ItemList);
void printItems(itemList *s);
int strcmpi(char *s, char *t);
void *dmalloc(size_t size);
#define MAX_CHAR 200

#endif /* itemList_qvo8_201_h */
bash-4.1$ cat itemList_qvo8_201.h[Kc

#include "itemList_qvo8_201.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

//This function is for creating a new itemList
itemList *createItem()
{
    itemList *newItemList = dmalloc(sizeof(itemList)); //allocate memory for new itemList
    newItemList->head = NULL;
    newItemList->count = 0;
    
    return newItemList;
}

//This function is for inserting food items in the the current list
int insert(char *data, itemList **ItemList)
{
    node *FoodItem = NULL;
    FoodItem = dmalloc(sizeof(node)); //create new food item node
    FoodItem->next = NULL;
    FoodItem->data = dmalloc(MAX_CHAR * sizeof(char));
    strcpy(FoodItem->data, data); //copy the data entered by the user to the food item node

    if((*ItemList)->head == NULL) 
    {
        (*ItemList)->head = FoodItem;
        ((*ItemList)->count)++; //number of food items nodes increases
    }
    else if((strcmpi((*ItemList)->head->data, FoodItem->data)) > 0) //alphabetical order
    {
        FoodItem->next = (*ItemList)->head;
        (*ItemList)->head = FoodItem;
        ((*ItemList)->count)++;

    }
    else if((strcmpi((*ItemList)->head->data, FoodItem->data)) == 0) //check for duplicates
    {
        printf("Oops! You've already ordered this.\n");
	free(FoodItem->data); //need to free because didn't set it to ItemList->head
	free(FoodItem); 
        return 1; //return 1 when the insertion wasn't successful
    }
    else
    {
        node *temp = (*ItemList)->head;
        
        while(temp->next != NULL) //check for duplicates in the entire list
        {
            if((strcmpi(temp->next->data, FoodItem->data)) == 0)
            {
            printf("Oops! You've already ordered this.\n");
	    free(FoodItem->data); //need to free b/c didn't set it to ItemList->head
	    free(FoodItem);
            return 1;
            }
            temp = temp->next;
        }
        
        temp = NULL;
        temp = (*ItemList)->head;
        
        while((temp->next != NULL) && ((strcmpi(temp->next->data, FoodItem->data)) < 0)) //alphabetical order
              {
                  temp = temp->next;
              }
        FoodItem->next = temp->next;
        temp->next = FoodItem;
        ((*ItemList)->count)++;
    }
	return 0; //return 0 when the insertion was successful
}


//This function is for printing out all the food items in the list
void printItems(itemList *ItemList)
{
    node *temp = ItemList->head;
    int i = 0;
    for(i = 0; i < ItemList->count; i++)
    {
        printf("%s", temp->data); //print each food item to stdout
        temp = temp->next;
    }
    
}

/* compares strings for alphabetical ordering */
int strcmpi(char *s, char *t)
{
    while (*s && tolower(*s) == tolower(*t))
    {
        s++;
        t++;
        
    }
    return tolower(*s) - tolower(*t);
}

/* allocates memory with a check for successful allocation */
void *dmalloc(size_t size)
{
    void *p = malloc(size);
    if (!p)
    {
        printf("memory allocation failed\n");
        exit(1);
    }
    return p;
}




bash-4.1$ cat order_qvo8_201.h
#ifndef ORDER_QVO8_201_H
#define ORDER_QVO8_201_H

#include "itemList_qvo8_201.h"
#include <stddef.h>

typedef struct _ordernode
{
    itemList *list;
    char *deliverTo;
    char *restaurant;
    struct _ordernode *next;
} ordernode;
//prototypes
ordernode *createOrder();
int insertOrder(ordernode *orderHead, ordernode *Order);
void printOrders(ordernode *orderHead);
void deleteOrder(ordernode **orderHead);

#endif /*order_qvo8_201.h*/
bash-4.1$ cat order_qvo8_201.h[Kc
#include "itemList_qvo8_201.h"
#include "order_qvo8_201.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

//This funtion is for creating a new ordernode
ordernode *createOrder()
{
    ordernode *Order = dmalloc(sizeof(ordernode));

    printf("Delivery Address for new delivery order: "); //ask for the location to deliver
    Order->deliverTo = dmalloc(MAX_CHAR * sizeof(char));
    fgets(Order->deliverTo, MAX_CHAR, stdin);

    printf("Restaurant from which to pick up food: "); //ask for the name of the eatery
    Order->restaurant = dmalloc(MAX_CHAR * sizeof(char));
    fgets(Order->restaurant, MAX_CHAR, stdin);
    
    Order->restaurant[strlen(Order->restaurant) - 1] = '\0'; //remove traling linefeed
    return Order;
}


//This function is for creating a delivery list of ordernodes, using dummy head
int insertOrder(ordernode *orderHead, ordernode *Order)
{   
    ordernode *temp = orderHead;
    
    Order->next = temp->next;
    temp->next = Order;
    return 0;

}

//this function is for printing the entire delivery list in LIFO order
void printOrders(ordernode *orderHead)
{
    if(orderHead == NULL)
    {
        printf("No order was placed! Please order something.\n"); //reminder that there was no order placed
    }
    else
    {
    printf("\nList of Deliveries: \n");
    orderHead = orderHead->next;
    while(orderHead != NULL)
    {
        printf("\nDelivery order from %s has %d food item(s)", orderHead->restaurant, orderHead->list->count - 1);
        printItems(orderHead->list); //print the food items in itemList
        printf("Deliver to: %s", orderHead->deliverTo);
        orderHead = orderHead->next;
    }
    }
}

//This funtion is for deleting the entire delivery list after the user hits n
void deleteOrder(ordernode **orderHead)
{
    ordernode *delNode = (*orderHead)->next;
    ordernode *temp;
    node *next;

//delete all elements in each ordernode
    while(delNode != NULL)
    {
        temp = delNode->next;
        free(delNode->deliverTo); //delete deliverTo
        free(delNode->restaurant); //delete restaurant
        while(delNode->list->head != NULL)
        {
            next = delNode->list->head;
            free(next->data); //delete value of each FoodItem
            delNode->list->head = delNode->list->head->next;
            free(next); //delete each food node in the list
        }
        free(delNode->list); //delete each ItemList
        delNode = temp;

    }
//delete all ordernodes in the delivery list
        delNode = NULL;
        temp = NULL;
        delNode = *orderHead;
        while(delNode != NULL)
        {
        temp = delNode->next;
        free(delNode); //delete each ordernode
        delNode = temp;
        }
}


bash-4.1$ cat proj3_qvo8_201.c 
/* Quang Vo G01122283
 * CS 262,  Section 201
 * Project 3
 * The goal of this program is to model the functionality of the food delivery app, that students will be able to call in an order from any of the campus eateries, and have the item * delivered to the appropriate location. This program will be implemented using linked list. 
 */


#include "itemList_qvo8_201.h"
#include "order_qvo8_201.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int main()
{
    
    ordernode *orderHead = dmalloc(sizeof(ordernode)); //create dummy head for the delivery list
    orderHead->next = NULL;
    
    char yesNo = '\0';
    
    do
    {
        printf("\nNew delivery order? (y/n)"); //ask for new delivery order
        char buffer[100];
        fgets(buffer, 100, stdin);
        sscanf(buffer, "%c", &yesNo);
        
        switch(yesNo)
        {
            case 'y':
            case 'Y':
                printf("Hi\n");
                
                ordernode *Order = createOrder(); //create new orderNode
                
                printf("What do you want to order: \n");
                char *FoodItem = dmalloc(MAX_CHAR * sizeof(char));
                Order->list = createItem(); //create a new list of food items for an order
                do
                {
                    printf("food item: ");
                    fgets(FoodItem, MAX_CHAR, stdin); //enter each food item
                    insert(FoodItem, &Order->list); //add them to the list

                }while(FoodItem[0] != '\n'); //until the user enters an empty string
		free(FoodItem); //deallocate the memory of the FoodItem pointer
                insertOrder(orderHead, Order); //insert each order into the delivery list
                break;
            case 'n':
            case 'N':
                printOrders(orderHead); //when the user hits n the delivery list will be printed out
                deleteOrder(&orderHead); //delete the entire list

                break;
            default:
                printf("Invalid input! Try again. \n"); //handles invalid input
        }
        
    }while (yesNo != 'n' && yesNo != 'N');
    
    
    return 0;
}

bash-4.1$ make
gcc -g -Wall -O0 -pedantic-errors -o proj3_qvo8_201 proj3_qvo8_201.c itemList_qvo8_201.c order_qvo8_201.c
bash-4.1$ makecat proj3_qvo8_201.c [C[C[C[C[C[C[C[C[C[C[C[C[C[C[1Porder_qvo8_201.ch[C[C[C[C[C[C[C[C[C[C[C[C[C[CitemList_qvo8_201.ch[C[C[C[C[C[C[C[C[C[Cls[Kuname -a[4Pdatetar tvf Lab12_qvo8_201.tar[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccvf Lab12_qvo8_201.tar lab12[C[C[C[C[C[C[C[C[C[Ccd ..[K[3Plscd ..tar cvf Lab12_qvo8_201.tar lab12[C[C[C[C[C[C[C[C[C[C[C[C[C[C[6Ptvf Lab12_qvo8_201.tar[C[C[C[C[C[C[C[C[C[Cdate[Kuname -als[Kcat itemList_qvo8_201.hc[C[C[C[C[C[C[C[C[C[C[C[C[C[C[3Porder_qvo8_201.hc[C[C[C[C[C[C[C[C[C[C[C[C[C[Cproj3_qvo8_201.c [C[C[C[C[C[C[C[C[C[Cmake[K[Kvalgrind --leak-check=yes proj3_qvo8_201
==23772== Memcheck, a memory error detector
==23772== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==23772== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==23772== Command: proj3_qvo8_201
==23772== 

New delivery order? (y/n)y
Hi
Delivery Address for new delivery order: Engineering Building 5335
Restaurant from which to pick up food: Panda Express
What do you want to order: 
food item: Fried Rice
food item: Orange Chicken
food item: Hunan Beef
food item: Hunan Beef
Oops! You've already ordered this.
food item: 

New delivery order? (y/n)x
Invalid input! Try again. 

New delivery order? (y/n)y
Hi
Delivery Address for new delivery order: Lecture Hall 2
Restaurant from which to pick up food: Red Hot & Blue
What do you want to order: 
food item: Pulled Pork Sandwich
food item: Potato Salad
food item: 

New delivery order? (y/n)y
Hi
Delivery Address for new delivery order: Merten 1200
Restaurant from which to pick up food: Dunkin' Donuts
What do you want to order: 
food item: Bacon, Egg & Cheese on Plain Bagel
food item: Glazed Donut
food item: Large Unsweetened Iced Tea
food item: 

New delivery order? (y/n)n

List of Deliveries: 

Delivery order from Dunkin' Donuts has 3 food item(s)
Bacon, Egg & Cheese on Plain Bagel
Glazed Donut
Large Unsweetened Iced Tea
Deliver to: Merten 1200

Delivery order from Red Hot & Blue has 2 food item(s)
Potato Salad
Pulled Pork Sandwich
Deliver to: Lecture Hall 2

Delivery order from Panda Express has 3 food item(s)
Fried Rice
Hunan Beef
Orange Chicken
Deliver to: Engineering Building 5335
==23772== 
==23772== HEAP SUMMARY:
==23772==     in use at exit: 0 bytes in 0 blocks
==23772==   total heap usage: 40 allocs, 40 frees, 4,568 bytes allocated
==23772== 
==23772== All heap blocks were freed -- no leaks are possible
==23772== 
==23772== For counts of detected and suppressed errors, rerun with: -v
==23772== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 4 from 4)
bash-4.1$ exit

Script done on Tue 24 Apr 2018 12:09:49 PM EDT
